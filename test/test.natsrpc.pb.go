// Code generated by protoc-gen-natsrpc. DO NOT EDIT.
// versions:
// - protoc-gen-natsrpc v0.7.0
// source: test.proto

package test

import (
	context "context"
	natsrpc "github.com/LeKovr/natsrpc"
	reflect "reflect"
)

var _ context.Context
var _ reflect.Value
var _ = natsrpc.SupportVersion_0_7_0

const (
	TestServer_NRServiceName = "natsrpc.TestServer"
)

type TestServerNRClient interface {
	Test1(ctx context.Context, req *TestRequest, opt ...natsrpc.CallOption) (*TestReply, error)
	Test2(ctx context.Context, notify *TestRequest, opt ...natsrpc.CallOption) error
}

type _TestServerNRClientImpl struct {
	c natsrpc.ClientInterface
}

// NewTestServerNRClient
func NewTestServerNRClient(c natsrpc.ClientInterface) TestServerNRClient {
	ret := &_TestServerNRClientImpl{
		c: c,
	}
	return ret
}
func (c *_TestServerNRClientImpl) Test1(ctx context.Context, req *TestRequest, opt ...natsrpc.CallOption) (*TestReply, error) {
	rep := &TestReply{}
	err := c.c.Request(ctx, TestServer_NRServiceName, "Test1", req, rep, opt...)
	if err != nil {
		return nil, err
	}
	return rep, err
}
func (c *_TestServerNRClientImpl) Test2(ctx context.Context, notify *TestRequest, opt ...natsrpc.CallOption) error {
	return c.c.Publish(ctx, TestServer_NRServiceName, "Test2", notify, opt...)
}

var TestServer_NRServiceDesc = natsrpc.ServiceDesc{
	ServiceName: TestServer_NRServiceName,
	Methods: []natsrpc.MethodDesc{
		{
			MethodName:  "Test1",
			Handler:     _TestServer_Test1_NRHandler,
			RequestType: reflect.TypeOf(TestRequest{}),
			IsPublish:   false,
		},
		{
			MethodName:  "Test2",
			Handler:     _TestServer_Test2_NRHandler,
			RequestType: reflect.TypeOf(TestRequest{}),
			IsPublish:   true,
		},
	},
	Metadata: "test.proto",
}

type TestServerNRServer interface {
	Test1(ctx context.Context, req *TestRequest) (*TestReply, error)
	Test2(ctx context.Context, req *TestRequest) (*Nil, error)
}

func _TestServer_Test1_NRHandler(svc interface{}, ctx context.Context, req any) (any, error) {
	return svc.(TestServerNRServer).Test1(ctx, req.(*TestRequest))
}
func _TestServer_Test2_NRHandler(svc interface{}, ctx context.Context, req any) (any, error) {
	return svc.(TestServerNRServer).Test2(ctx, req.(*TestRequest))
}

func RegisterTestServerNRServer(register natsrpc.ServiceRegistrar, s TestServerNRServer, opts ...natsrpc.ServiceOption) (natsrpc.ServiceInterface, error) {
	return register.Register(TestServer_NRServiceDesc, s, opts...)
}
